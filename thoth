#!/bin/bash

# thoth - https://en.wikipedia.org/wiki/Thoth
# helpful English diction tools for the command line

# ============ STARTUP ============ #
self="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
version=0.0.0
description="Helpful English diction tools for the command line"
if [[ -f .thothdict ]] ; then
	dict="$(cat .thothdict)"
	if [[ ! -d "$dict" ]] ; then dict= ; fi
else
	if [[ -d dict/ ]] ; then dict="${self}/dict/" ; echo "$dict" > .thothdict ; fi
fi

# ============ AVAILABLE CLI FUNCTIONS ============ #
function define {
	if [[ "$1" == "-h" || "$1" == "--help" ]] ; then
		__helptext ">> thoth define WORD\nDefine the word WORD."
		return
	fi

	__verify_dict || return 1

	if [[ $# -eq 0 ]] ; then
		__errortext "thoth: what word do you want to define?"
		return 1
	fi

	exit_code=0
	for term in "$@" ; do
		letter="${term:0:1}"
		if [[ ! -d "${dict}/${letter}" ]] ; then
			__errortext "thoth: no definition for '$term'"
			exit_code=1
			continue
		fi
		output="$(\
			sed -n -e "/^>>> ${term}$/,/>>>/p" "${dict}/${letter}/words.txt" | \
			sed -e '$d' -e 's/>>> //g' | \
			sed -e '/Examples:.*/d' | \
			sed -e '/^  -.*/d' | \
			sed -e '/Synonyms:.*/d' | \
			sed -e '/Antonyms:.*/d' | \
			sed -e '/Types:.*/d' | \
			sed -e '/Type of:.*/d' | \
			cat -s \
		)"
		if [[ "$output" == "" ]] ; then
			__errortext "thoth: no definition for '$term'"
			exit_code=1
			continue
		else
			echo "$output"
			echo
		fi
	done
	return $exit_code
}

function lookup {
	if [[ "$1" == "-h" || "$1" == "--help" ]] ; then
		__helptext ">> thoth lookup WORD\nGet all information for word WORD."
		return
	fi

	__verify_dict || return 1

	if [[ $# -eq 0 ]] ; then
		__errortext "thoth: what word do you want to lookup?"
		return 1
	fi

	exit_code=0
	for term in "$@" ; do
		letter="${term:0:1}"
		if [[ ! -d "${dict}/${letter}" ]] ; then
			__errortext "thoth: no lookup record for '$term'"
			exit_code=1
			continue
		fi
		output="$(\
			sed -n -e "/^>>> ${term}$/,/>>>/p" "${dict}/${letter}/words.txt" | \
			sed -e '$d' -e 's/>>> //g' | \
			cat -s \
		)"
		if [[ "$output" == "" ]] ; then
			__errortext "thoth: no lookup record for '$term'"
			exit_code=1
			continue
		else
			echo "$output"
			echo
		fi
	done
	return $exit_code
}

function shell {
	if [[ $thoth_shell -eq 1 ]] ; then
		__errortext "thoth shell is already running"
		return 1
	fi

	thoth_shell=1
	if [[ "$1" == "-h" || "$1" == "--help" ]] ; then
		__helptext ">> thoth shell\nOpen a new thoth shell to interpret thoth commands."
		return
	fi

	prompt=">> "
	while : ; do
		echo -n "$prompt"
		IFS= read key
		if [[ "$key" == "exit"* || "$key" == "quit"* ]] ; then return ; fi
		functions=( `__listfunctions` )
		found=0
		for func in "${functions[@]}" ; do
			if [[ "$func" == "`echo "$key" | cut -d ' ' -f 1`" ]] ; then
				found=1
			fi
		done
		if [[ $found -eq 0 ]] ; then
			__errortext "Unknown command '`echo $key | cut -d ' ' -f 1`'"
			continue
		fi
		$key
	done
}

function synonym {
	if [[ "$1" == "-h" || "$1" == "--help" ]] ; then
		__helptext ">> thoth synonym WORD\nFind synonyms for word WORD."
		return
	fi

	__verify_dict || return 1

	if [[ $# -eq 0 ]] ; then
		__errortext "thoth: for what word do you want to find synonyms?"
		return 1
	fi

	exit_code=0
	for term in "$@" ; do
		letter="${term:0:1}"
		if [[ ! -d "${dict}/${letter}" ]] ; then
			__errortext "thoth: no synonyms for '$term'"
			exit_code=1
			continue
		fi
		output="$(\
			sed -n -e "/^>>> ${term}$/,/>>>/p" "${dict}/${letter}/words.txt" | \
			sed -e '$d' -e 's/>>> //g' | \
			sed -e '/(.*).*/d' | \
			sed -e '/Examples:.*/d' | \
			sed -e '/^  -.*/d' | \
			sed -e '/Antonyms:.*/d' | \
			sed -e '/Types:.*/d' | \
			sed -e '/Type of:.*/d' | \
			cat -s \
		)"
		if [[ "$output" != *"Synonyms:"* ]] ; then
			__errortext "thoth: no synonyms for '$term'"
			exit_code=1
			continue
		else
			echo "$output"
			echo
		fi
	done
	return $exit_code
}

function antonym {
	if [[ "$1" == "-h" || "$1" == "--help" ]] ; then
		__helptext ">> thoth antonym WORD\nFind antonyms for word WORD."
		return
	fi

	__verify_dict || return 1

	if [[ $# -eq 0 ]] ; then
		__errortext "thoth: for what word do you want to find antonyms?"
		return 1
	fi

	exit_code=0
	for term in "$@" ; do
		letter="${term:0:1}"
		if [[ ! -d "${dict}/${letter}" ]] ; then
			__errortext "thoth: no antonyms for '$term'"
			exit_code=1
			continue
		fi
		output="$(\
			sed -n -e "/^>>> ${term}$/,/>>>/p" "${dict}/${letter}/words.txt" | \
			sed -e '$d' -e 's/>>> //g' | \
			sed -e '/Examples:.*/d' | \
			sed -e '/^  -.*/d' | \
			sed -e '/(.*).*/d' | \
			sed -e '/Synonyms:.*/d' | \
			sed -e '/Types:.*/d' | \
			sed -e '/Type of:.*/d' | \
			cat -s \
		)"
		if [[ "$output" != *"Antonyms:"* ]] ; then
			__errortext "thoth: no antonyms for '$term'"
			exit_code=1
			continue
		else
			echo "$output"
			echo
		fi
	done
	return $exit_code
}

function type {
	if [[ "$1" == "-h" || "$1" == "--help" ]] ; then
		__helptext ">> thoth type WORD\nFind types for word WORD."
		return
	fi

	__verify_dict || return 1

	if [[ $# -eq 0 ]] ; then
		__errortext "thoth: for what word do you want to find types?"
		return 1
	fi

	exit_code=0
	for term in "$@" ; do
		letter="${term:0:1}"
		if [[ ! -d "${dict}/${letter}" ]] ; then
			__errortext "thoth: no types for '$term'"
			exit_code=1
			continue
		fi
		output="$(\
			sed -n -e "/^>>> ${term}$/,/>>>/p" "${dict}/${letter}/words.txt" | \
			sed -e '$d' -e 's/>>> //g' | \
			sed -e '/Examples:.*/d' | \
			sed -e '/^  -.*/d' | \
			sed -e '/(.*).*/d' | \
			sed -e '/Synonyms:.*/d' | \
			sed -e '/Antonyms:.*/d' | \
			sed -e '/Type of:.*/d' | \
			cat -s \
		)"
		if [[ "$output" != *"Types:"* ]] ; then
			__errortext "thoth: no types for '$term'"
			exit_code=1
			continue
		else
			echo "$output"
			echo
		fi
	done
	return $exit_code
}

function typeof {
	if [[ "$1" == "-h" || "$1" == "--help" ]] ; then
		__helptext ">> thoth typeof WORD\nFind types of for word WORD."
		return
	fi

	__verify_dict || return 1

	if [[ $# -eq 0 ]] ; then
		__errortext "thoth: for what word do you want to find types of?"
		return 1
	fi

	exit_code=0
	for term in "$@" ; do
		letter="${term:0:1}"
		if [[ ! -d "${dict}/${letter}" ]] ; then
			__errortext "thoth: no types of for '$term'"
			exit_code=1
			continue
		fi
		output="$(\
			sed -n -e "/^>>> ${term}$/,/>>>/p" "${dict}/${letter}/words.txt" | \
			sed -e '$d' -e 's/>>> //g' | \
			sed -e '/Examples:.*/d' | \
			sed -e '/^  -.*/d' | \
			sed -e '/(.*).*/d' | \
			sed -e '/Synonyms:.*/d' | \
			sed -e '/Antonyms:.*/d' | \
			sed -e '/Types:.*/d' | \
			cat -s \
		)"
		if [[ "$output" != *"Type of:"* ]] ; then
			__errortext "thoth: no types of for '$term'"
			exit_code=1
			continue
		else
			echo "$output"
			echo
		fi
	done
	return $exit_code
}

function example {
	if [[ "$1" == "-h" || "$1" == "--help" ]] ; then
		__helptext ">> thoth example WORD\nFind examples for word WORD."
		return
	fi
	
	__verify_dict || return 1

	if [[ $# -eq 0 ]] ; then
		__errortext "thoth: for what word do you want to find examples?"
		return 1
	fi

	exit_code=0
	for term in "$@" ; do
		letter="${term:0:1}"
		if [[ ! -d "${dict}/${letter}" ]] ; then
			__errortext "thoth: no examples of for '$term'"
			exit_code=1
			continue
		fi
		output="$(\
			sed -n -e "/^>>> ${term}$/,/>>>/p" "${dict}/${letter}/words.txt" | \
			sed -e '$d' -e 's/>>> //g' | \
			sed -e '/(.*).*/d' | \
			sed -e '/Synonyms:.*/d' | \
			sed -e '/Antonyms:.*/d' | \
			sed -e '/Types:.*/d' | \
			sed -e '/Type of:.*/d' | \
			cat -s \
		)"
		if [[ "$output" != *"Examples:"* ]] ; then
			__errortext "thoth: no examples of for '$term'"
			exit_code=1
			continue
		else
			echo "$output"
			echo
		fi
	done
	return $exit_code
}

function list {
	if [[ "$1" == "-h" || "$1" == "--help" ]] ; then
		__helptext ">> thoth list\nList all available commands."
		return
	fi
	__listfunctions
}

function version {
	if [[ "$1" == "-h" || "$1" == "--help" ]] ; then
		__helptext ">> thoth version\nPrint thoth version."
		return
	fi
	echo "$version"
}

function install {
	if [[ "$1" == "-h" || "$1" == "--help" ]] ; then
		__helptext ">> thoth install DICT\nInstall a new dictionary DICT to use in place of thoth's default dictionary (the DICT argument needs to be a valid path to a dictionary, where a dictionary is a directory of word records). To understand the dictionary format, use \`thoth install --example\`. The currently installed dictionary can be viewed with \`thoth info\`. If an invalid dictionary has been installed, thoth's default dictionary can be reset with \`thoth reset\`."
		return
	fi

	if [[ "$1" == "--example" ]] ; then
		__helptext "To install a new dictionary, supply a path to a directory with the following structure (with subdirectories for all 26 letters):\n.\n├── a\n│   └── words.txt\n├── b\n│   └── words.txt\n...\n├── y\n│   └── words.txt\n└── z\n    └── words.txt\n\nWhere each 'words.txt' file contains all of the words that begin with the letter of its parent directory, using the following format:\n>>> word\n\n(part of speech) definition\nExamples:\n  - \"example containing word\"\n  - \"example containing word\"\nSynonyms: synonym, synonym\nAntonyms: antonym, antonym\nTypes: type, type\nType of: typeof, typeof\n\nWords can have multiple definitions, separated by a newline. At least one definition and part of speech is required for each word, while 'examples', 'synonyms', 'antonyms', 'types', and 'type of' are all optional for each defition. The words in each 'words.txt' file do not need to be in alphabetical order.\n\nFor example, here a potential word record for the word 'cat', which would be found in the dictionary at 'c/words.txt':\n>>> cat\n\n(n) feline mammal usually having thick soft fur and no ability to roar\nExamples:\n  - \"the dog chased the cat\"\nSynonyms: wild cat\nAntonyms: dog\nTypes: panther, mountain lion, puma, lynx, jaguar, ocelot\nType of: feline\n\n(n) a large tracked vehicle that is propelled by two endless metal belts; frequently used for moving earth in construction and farm work\nSynonyms: Caterpillar\n\nTo see more examples, review the default dictionary, found in: ${self}/dict"
		return
	fi

	if [[ "$1" == "" ]] ; then
		__errortext "thoth: err: missing path to DICT"
		return 1
	fi

	if [[ ! -d "$1" ]] ; then
		__errortext "thoth: err: no such directory '$1'"
		return 1
	fi

	dictpath="$( cd "$1" ; pwd ; )"

	for letter in a b c d e f g h i j k l m n o p q r s t u v w x y z ; do
		if [[ ! -f "${dictpath}/${letter}/words.txt" ]] ; then
			__errortext "thoth: err: supplied dictionary '$1' is missing words file for the letter '$letter'"
			return 1
		fi
	done

	dict="$dictpath"
	echo "$dict" > .thothdict
}

function reset {
	if [[ "$1" == "-h" || "$1" == "--help" ]] ; then
		__helptext ">> thoth reset\nReset thoth's dictionary to the default dictionary."
		return
	fi
	if [[ -f .thothdict ]] ; then rm -rf .thothdict ; fi
}

function add {
	if [[ "$1" == "-h" || "$1" == "--help" ]] ; then
		__helptext ">> thoth add\nAdd a new word to the dictionary."
		return
	fi

	__verify_dict

	output=

	echo -n "What word would you like to add? "
	read word
	if lookup "$word" > /dev/null 2>&1 ; then
		__errortext "thoth: err: '$word' is already in the dictionary"
		return 1
	fi
	if [ -n "$numdefs" ] && [ "$numdefs" -eq "$numdefs" ] ; then
		__errortext "thoth: err: definitions for numbers are not supported"
		return 1
	fi

	output=">>> ${word}\n\n"

	echo -n "How many definitions does '$word' have? "
	read numdefs
	if ! [ -n "$numdefs" ] || ! [ "$numdefs" -eq "$numdefs" ] 2> /dev/null || [[ $numdefs -lt 1 ]]; then
		__errortext "thoth: err: number of definitions must be an integer greater than 0"
		return 1
	fi

	function __getdetails {
		index=$1
		shift
		for aspect in "$@" ; do
			echo -n "Does definition #$index of '$word' have any $aspect? (y/n) "
			read answer
			if [[ ! "$answer" =~ ^[Yy](es)*$ ]] ; then continue ; fi
			echo -n "What are the $aspect for definition #$index of '$word'? (enter $aspect separated by a comma): "
			read answer
			uppercase="`echo ${aspect:0:1} | tr '[a-z]' '[A-Z]'`${aspect:1}"
			if [[ "$aspect" == "examples" ]] ; then
				output="${output}${uppercase}:\n  - \""
				while read -n1 character ; do
					if [[ "$character" == "" ]] ; then
						output="${output} "
					elif [[ "$character" == "," ]] ; then
						output="${output}\"\n  - \""
					else
						output="${output}${character}"
					fi
				done < <(echo -n "$answer")
				output="${output}\"\n"
			else
				output="${output}${uppercase}: ${answer}\n"
			fi
		done
	}

	for def in `seq 1 $numdefs` ; do
		echo -n "What is the type of speech for definition #$def of '$word'? "
		read tos
		validtos=( adj adv art ij n phrase prep pronoun v )
		if [[ "${validtos[@]}" != *"$tos"* ]] ; then
			__errortext "thoth: err: invalid type of speech, options are: ${validtos[@]}"
			return 1
		fi
		echo -n "What is the definition for defition #$def of '$word'? "
		read definition
		output="${output}(${tos}) ${definition}\n"
		__getdetails $def examples synonyms antonyms types "type of"
		output="${output}"
	done

	letter="${word:0:1}"
	echo -e "$output" >> "${dict}/${letter}/words.txt"
	echo "Added '$word' to the dictionary"
}

function info {
	if [[ "$1" == "-h" || "$1" == "--help" ]] ; then
		__helptext ">> thoth info\nPrint info about thoth."
		return
	fi
	cat << EndOfInfo
Name:        thoth
Description: $description
Author:      Will Carhart
Version:     v$version

utility:     ${self}/thoth
dictionary:  ${dict}   
EndOfInfo
}

function help {
	if [[ "$1" == "-h" || "$1" == "--help" ]] ; then
		__helptext ">> thoth help\nShow this menu and exit."
		return
	fi
	cat << EndOfHelp
$description

Usage:
  thoth COMMAND

Available commands:
$(__listfunctions | sed "s/^/  /")

$( \
	for cmd in `__listfunctions` ; do \
		echo "$(${self}/thoth $cmd --help)" && \
		echo ; \
	done \
)
EndOfHelp
}

# ============ META FUNCTIONS ============ #
function __listfunctions {
	functionlist=( `declare -F | sed -e 's/declare -f //g' -e 's/[_-].*//g'` )
	for func in "${functionlist[@]}" ; do
		echo "$func"
	done
}

function __helptext {
	echo -e "$@" | fold -w 100 -s
}

function __errortext {
	>&2 echo "$@"
}

function __verify_dict {
	if [[ "$dict" == "" ]] ; then
		__errortext "thoth: err: could not find a dictionary directory"
		__errortext "  Use \`thoth info\` to see the currently installed dictionary"
		__errortext "  location and verify that a directory exists at the specified"
		__errortext "  location."
		return 1
	fi
}

function --help {
	help "$@"
}

function -h {
	help "$@"
}

# ============ RUN LOGIC ============ #
if declare -F -- "${1:-}" >/dev/null ; then
	"$@"
else
	__errortext "thoth: err: no such command '$1'"
	__errortext "Use 'help' for available commands"
	exit 1
fi
